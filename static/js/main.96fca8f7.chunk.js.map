{"version":3,"sources":["dinoCard.js","dinoButton.js","colorButton.js","nameform.js","cardList.js","carousel.js","App.js","serviceWorker.js","index.js"],"names":["dinoCard","card","this","props","dinocard","Card","className","style","background","color","Image","src","img","Content","Header","display","flexFlow","justifyContent","width","height","name","onClick","deleteDino","id","Description","Component","DinoButton","console","log","dinos","dinosArray","map","dino","handleDinoClick","backgroundImage","key","class","alt","colorButton","colorArray","colors","handleColorClick","backgroundColor","Nameform","state","user_card","dinoFormImg","dinoFormColor","handleChange","event","preventDefault","setState","target","value","new_dino_img","new_card_color","onSubmit","dinoCardBE","user_id","color_id","filter","colorObj","dino_id","fetch","method","body","JSON","stringify","headers","then","res","json","catch","error","response","createDinoCard","onChange","type","autoComplete","CardList","dinocards","length","handleNameSubmit","reverse","Carousel","carouselcard","App","users","prevDinoCards","push","cardId","url","getDinoCards","dinoCardsObj","dinocardsR","dinocardsRR","dinoObj","userObj","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96fca8f7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Card, Image } from 'semantic-ui-react'\n\nexport default class dinoCard extends Component {\n    render() {\n        let card = this.props.dinocard\n        return (\n            <Card className=\"card carousel-cell\" style={{\n                background:card.color}}>\n            <Image src={card.img}></Image>\n            <Card.Content className=\"cardContent\"\n                          \n            >\n              <Card.Header style={{\n                                    color:'white',\n                                    display:\"flex\",\n                                    flexFlow:\"rowReverse\",\n                                    justifyContent:\"flexEnd\",\n                                    width: \"130px\", \n                                    height:\"235px\"\n                                    }}>User Name: {card.name}</Card.Header>\n              <button onClick={()=>this.props.deleteDino(card.id)} \n                    className=\"deleteButton\">Delete</button>\n              <Card.Description style={{\n                    background:card.color}}>\n              </Card.Description>\n            </Card.Content>\n          </Card>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './App.css';\n\n\n\nexport default class DinoButton extends Component {\n\n    render() {\n        console.log(\"from the DinoButton\", this.props.dinos)\n        const dinosArray = this.props.dinos.map(\n            (dino)=>{\n            return <button  onClick={\n                            ()=>this.props.handleDinoClick(dino.img)\n                                    }\n                            style={{backgroundImage: `url(\"${dino.img}\")`}} \n                            key={dino.id}\n                            className=\"dinobutton\"></button>\n                    })\n        return (\n            <div>\n            <>\n            {this.props.dinos \n            ?          \n            <div>\n            <ul>\n            {dinosArray}\n            </ul>\n            </div>\n            :\n            <div class=\"preloader\">\n            <img src=\"spinner.svg\" alt=\"spinner\"></img>\n            <text>loading...</text>\n            </div>\n            }\n            </>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class colorButton extends Component {\n    render() {\n        // console.log(this.props.colors)\n        const colorArray = this.props.colors.map(\n            (color)=>{\n            return <button  onClick={()=>this.props.handleColorClick(color.color)}\n                            style={{backgroundColor:`${color.color}`}}\n                            key={color.id} \n                            className=\"colorbutton\"></button>\n                    })\n        return (\n            <div className=\"colorButtonBox\">\n                {colorArray}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport DinoButton from './dinoButton.js'\nimport ColorButton from './colorButton.js'\nimport './App.css';\n\n\nexport default class Nameform extends Component {\n    state={\n        user_card:{},\n        dinoFormImg:\"\",\n        dinoFormColor:\"\",\n        name:\"\"\n    }\n    handleChange = (event) => {\n        event.preventDefault()\n        this.setState({name:event.target.value})\n    }\n    handleDinoClick = (new_dino_img) => {\n            this.setState({dinoFormImg:new_dino_img})\n        }\n    handleColorClick = (new_card_color) => {\n            this.setState({dinoFormColor:new_card_color})\n        }\n\n    onSubmit = (event) => {\n        event.preventDefault()\n        let img = this.state.dinoFormImg\n        let color = this.state.dinoFormColor\n        let name = this.state.name\n        if (!img || !color || !name){\n            return  //this line returns out of onSubmit when data isn't valid\n        } \n        let colorId = this.props.colors.filter(colorObj => colorObj.color === color)[0].id\n        let dinoId = this.props.dinos.filter(dino => dino.img === img)[0].id\n        let dinoCardBE = {user_id:1, color_id:colorId, dino_id:dinoId}\n        \n        const url = \"https://hidden-fjord-86683.herokuapp.com/user_cards\"\n        fetch(url, {method: 'POST',\n        body:JSON.stringify(dinoCardBE),\n        headers: {'content-type':'application/json'}\n    })\n    .then(res=>res.json())\n    .catch(error=>console.error(\"Error:\",error))\n    .then(response=>{\n        let dinoCard = {img:img, color:color, name:name, id:response.id}\n        this.props.createDinoCard(dinoCard)\n                    console.log('Success:',response)\n                    this.setState({\n                        dinoFormImg:\"\",\n                        dinoFormColor:\"\",\n                        name:\"\"})\n                });\n                }\n    \n    render() {\n        return (\n            <div>\n                <div className=\"dinoContainer\">\n                    <ul>1. Choose a Dino.</ul>\n                    <DinoButton handleDinoClick={this.handleDinoClick} \n                      className=\"dinobutton\" \n                      dinos={this.props.dinos}/>\n                    </div>\n                    <ul>2. Choose a Color.</ul>\n                    <ul>\n                    <ColorButton  handleColorClick={this.handleColorClick} \n                          colors={this.props.colors}/>\n                    </ul>\n                <form onSubmit={this.onSubmit}>\n                            <br></br>\n                          3. Please Enter Your Name:\n                    <input  onChange={this.handleChange} \n                            type=\"text\"\n                            name=\"value\" \n                            value={this.state.name}\n                            autoComplete=\"off\"\n                            />\n                            <br></br>\n                            {/* Dino Chosen: */}\n                    {/* <input  defaultValue={this.state.dinoFormImg}\n                            autoComplete=\"off\"></input>\n                            Color Chosen:\n                    <input  defaultValue={this.state.dinoFormColor}\n                            autoComplete=\"off\"></input> */}\n                            <br></br>\n                            <br></br>\n                    <button type=\"submit\" \n                            value=\"Submit\"\n                            id=\"submitButton\" \n                            style={{className:\"formSubmit\"}} >Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport DinoCard from './dinoCard.js';\nimport Nameform from './nameform.js';\nimport './App.css';\nimport \"./flickity.css\";\n\n\nexport default class CardList extends Component {\n    \n    render() {\n        let dinocard;\n        if (this.props.dinocards.length > 0) {\n            dinocard = this.props.dinocards.map((card) => {\n            return <DinoCard \n            className=\"card carousel-cell\"\n            key={card.id} \n            deleteDino={this.props.deleteDino}\n            dinocard={card}/>\n            })\n        }\n\n        return (\n            <div className=\"dinoContainer\">\n                <Nameform \n                createDinoCard={this.props.createDinoCard}\n                colors={this.props.colors}\n                dinos={this.props.dinos} \n                handleNameSubmit={this.props.handleNameSubmit}/>\n                <button \n                onClick={\n                    ()=>this.props.reverse(dinocard)\n                    }\n                id=\"reverse\"\n                    >Reverse\n                </button>\n                 </div>\n\n        )\n    }\n}\n\n","import React from 'react';\nimport Flickity from \"react-flickity-component\";\nimport DinoCard from \"./dinoCard.js\"\n\nimport \"./flickity.css\";\n\nexport default function Carousel(props){\n\n    let carouselcard;\n    if (props.dinocards.length > 0) {\n        carouselcard = props.dinocards.map((card) => {\n        return <DinoCard \n        className=\"card carousel-cell\"\n        key={card.id} \n        deleteDino={props.deleteDino}\n        dinocard={card}/>\n        })\n    }\n    return (\n        <div className=\"carousel\"\n        // style={{overFlow:\"hidden\"}}\n        >\n        <Flickity>{carouselcard}</Flickity>\n        </div>\n    )\n}  \n","import React, { Component } from 'react'\nimport './App.css';\nimport CardList from './cardList.js'\nimport Carousel from './carousel.js'\n\nexport default class App extends Component {\n    state = { dinos:[],\n             colors:[],\n             dinocards:[],\n             users:[]\n            }\n\n  componentDidMount(){\n    fetch(\"https://hidden-fjord-86683.herokuapp.com/dinos\")\n    .then(res=>res.json())\n    .then(dinoObj =>{\n      this.setState({\n        dinos:dinoObj\n      })\n    }) \n\n    fetch(\"https://hidden-fjord-86683.herokuapp.com/colors\")\n    .then(res=>res.json())\n    .then(colorObj =>{\n      this.setState({\n        colors:colorObj\n      })\n    }) \n    \n    fetch(\"https://hidden-fjord-86683.herokuapp.com/dinos\")\n    .then(res=>res.json())\n    .then(userObj =>{\n      this.setState({\n        users:userObj\n      })\n    }) \n  }\n\n  createDinoCard = (dinoCard) =>{\n    let prevDinoCards = this.state.dinocards\n    prevDinoCards.push(dinoCard)\n    this.setState({dinocards:prevDinoCards})\n  }\n\n  deleteDino = (cardId) => {\n    const url = `https://hidden-fjord-86683.herokuapp.com/user_cards/${cardId}`\n        fetch(url, {method: 'DELETE'})\n        .then(res=>res.json())\n        .catch(error=>console.error(\"Error:\", error))\n        .then(response=>{\n          let dinocards = this.state.dinocards.filter(dinocard =>  dinocard.id !== cardId )\n          this.setState({dinocards:dinocards})\n  })\n  }\n\n  getDinoCards = () => {\n    fetch(\"https://hidden-fjord-86683.herokuapp.com/user_cards\")\n    .then(res=>res.json())\n    .then(dinoCardsObj =>{\n      console.log(dinoCardsObj)\n    })  \n  }\n\n  reverse = () => {\n    let dinocardsR = this.state.dinocards\n    let dinocardsR2 = [...dinocardsR]\n    let dinocardsRR = dinocardsR2.reverse()\n    this.setState({dinocards:dinocardsRR});\n  }\n  \n  \n  render() {\n    return (\n      <div className=\"app\">\n          <p className=\"title\">Dinosaur Cards</p>\n          <div className=\"gridDiv\">\n          <Carousel \n            dinocards={this.state.dinocards}\n            deleteDino={this.deleteDino}\n          />          \n          <CardList \n                colors={this.state.colors}\n                dinos={this.state.dinos} \n                dinocards={this.state.dinocards}\n                handleNameSubmit={this.handleNameSubmit}\n                createDinoCard={this.createDinoCard}\n                deleteDino={this.deleteDino}\n                reverse={this.reverse}\n                />\n          </div>\n\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}