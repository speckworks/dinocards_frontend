{"version":3,"sources":["dinoCard.js","dinoButton.js","colorButton.js","nameform.js","cardList.js","App.js","serviceWorker.js","index.js"],"names":["dinoCard","card","this","props","dinocard","Card","style","background","color","Image","src","img","Content","className","Header","name","onClick","deleteDino","id","Description","Component","DinoButton","console","log","dinos","dinosArray","map","dino","handleDinoClick","backgroundImage","key","colorButton","colorArray","colors","handleColorClick","backgroundColor","Nameform","state","user_card","dinoFormImg","dinoFormColor","handleChange","event","preventDefault","setState","target","value","new_dino_img","new_card_color","onSubmit","dinoCardBE","user_id","color_id","filter","colorObj","dino_id","fetch","method","body","JSON","stringify","headers","then","res","json","catch","error","response","createDinoCard","onChange","type","autoComplete","defaultValue","cardList","dinocards","length","handleNameSubmit","reverse","App","users","prevDinoCards","push","cardId","url","getDinoCards","dinoCardsObj","dinocardsR","dinocardsRR","dinoObj","userObj","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec95001e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Card, Image } from 'semantic-ui-react'\n\nexport default class dinoCard extends Component {\n    render() {\n        let card = this.props.dinocard\n        // {console.log(\"dinocard\", this.props.dinocard)}\n        return (\n            <Card  style={{\n                background:card.color}}>\n            <Image src={card.img}/>\n            <Card.Content className=\"cardContent\">\n              <Card.Header>User Name: {card.name}</Card.Header>\n              <button onClick={()=>this.props.deleteDino(card.id)} \n                    className=\"deleteButton\">Delete</button>\n              <Card.Description style={{\n                    background:card.color}}>\n              </Card.Description>\n            </Card.Content>\n          </Card>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './App.css';\n\n\n\nexport default class DinoButton extends Component {\n\n    render() {\n        console.log(\"from the DinoButton\", this.props.dinos)\n        const dinosArray = this.props.dinos.map(\n            (dino)=>{\n            return <button  onClick={\n                            ()=>this.props.handleDinoClick(dino.img)\n                                    }\n                            style={{backgroundImage: `url(\"${dino.img}\")`}} \n                            key={dino.id}\n                            className=\"dinobutton\"></button>\n                    })\n        return (\n            <div>\n            <ul>\n            {dinosArray}\n            </ul>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class colorButton extends Component {\n    render() {\n        // console.log(this.props.colors)\n        const colorArray = this.props.colors.map(\n            (color)=>{\n            return <button  onClick={()=>this.props.handleColorClick(color.color)}\n                            style={{backgroundColor:`${color.color}`}}\n                            key={color.id} \n                            className=\"colorbutton\"></button>\n                    })\n        return (\n            <div>\n                {colorArray}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport DinoButton from './dinoButton.js'\nimport ColorButton from './colorButton.js'\nimport './App.css';\n\n\nexport default class Nameform extends Component {\n    state={\n        user_card:{},\n        dinoFormImg:\"\",\n        dinoFormColor:\"\",\n        name:\"\"\n    }\n    handleChange = (event) => {\n        event.preventDefault()\n        this.setState({name:event.target.value})\n    }\n    handleDinoClick = (new_dino_img) => {\n            this.setState({dinoFormImg:new_dino_img})\n        }\n    handleColorClick = (new_card_color) => {\n            this.setState({dinoFormColor:new_card_color})\n        }\n\n    onSubmit = (event) => {\n        event.preventDefault()\n        let img = this.state.dinoFormImg\n        let color = this.state.dinoFormColor\n        let name = this.state.name\n        if (!img || !color || !name){\n            return  //this line returns out of onSubmit when data isn't valid\n        } \n        let colorId = this.props.colors.filter(colorObj => colorObj.color === color)[0].id\n        let dinoId = this.props.dinos.filter(dino => dino.img === img)[0].id\n        let dinoCardBE = {user_id:1, color_id:colorId, dino_id:dinoId}\n        \n        const url = \"https://hidden-fjord-86683.herokuapp.com/user_cards\"\n        fetch(url, {method: 'POST',\n        body:JSON.stringify(dinoCardBE),\n        headers: {'content-type':'application/json'}\n    })\n    .then(res=>res.json())\n    .catch(error=>console.error(\"Error:\",error))\n    .then(response=>{\n        let dinoCard = {img:img, color:color, name:name, id:response.id}\n        this.props.createDinoCard(dinoCard)\n                    console.log('Success:',response)\n                    this.setState({\n                        dinoFormImg:\"\",\n                        dinoFormColor:\"\",\n                        name:\"\"})\n                });\n                }\n    \n    render() {\n        return (\n            <div>\n                <div className=\"dinoContainer\">\n                    <ul>1. Choose a Dino.</ul>\n                    <DinoButton handleDinoClick={this.handleDinoClick} \n                      className=\"dinobutton\" \n                      dinos={this.props.dinos}/>\n                    </div>\n\n                    <div>\n                    <ul>2. Choose a Color.</ul>\n                    <ul className=\"color button\">\n                    <ColorButton  handleColorClick={this.handleColorClick} \n                          colors={this.props.colors}/>\n\n                    </ul>\n                    </div>\n                <form onSubmit={this.onSubmit}>\n                           Please Enter Your Name:\n                    <input  onChange={this.handleChange} \n                            type=\"text\"\n                            name=\"value\" \n                            value={this.state.name}\n                            autoComplete=\"off\"\n                            />\n                            Dino Chosen:\n                    <input  defaultValue={this.state.dinoFormImg}\n                            autoComplete=\"off\"></input>\n                            Color Chosen:\n                    <input  defaultValue={this.state.dinoFormColor}\n                            autoComplete=\"off\"></input>\n                    <button type=\"submit\" \n                            value=\"Submit\"\n                            id=\"submitButton\" \n                            style={{className:\"formSubmit\"}} >Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport DinoCard from './dinoCard.js';\nimport Nameform from './nameform.js';\nimport './App.css';\n\nexport default class cardList extends Component {\n    render() {\n        let dinocard;\n        if (this.props.dinocards.length > 0) {\n            dinocard = this.props.dinocards.map((card) => {\n                // console.log(dinocards)\n            return <DinoCard \n            key={card.id} \n            deleteDino={this.props.deleteDino}\n            dinocard={card}/>\n            })\n        }\n\n        return (\n            <div>\n                <Nameform \n                createDinoCard={this.props.createDinoCard}\n                colors={this.props.colors}\n                dinos={this.props.dinos} \n                handleNameSubmit={this.props.handleNameSubmit}/>\n\n                <div id=\"card-list\">\n                <button \n                onClick={\n                    ()=>this.props.reverse(dinocard)\n                    }\n                id=\"reverse\"\n                    >Reverse\n                </button>\n                {dinocard}\n                </div>\n            </div>\n        )\n    }\n}\n\n","import React, { Component } from 'react'\nimport './App.css';\nimport CardList from './cardList.js'\n\nexport default class App extends Component {\n    state = { dinos:[],\n             colors:[],\n             dinocards:[],\n             users:[]\n            }\n\n  componentDidMount(){\n    fetch(\"https://hidden-fjord-86683.herokuapp.com/dinos\")\n    .then(res=>res.json())\n    .then(dinoObj =>{\n      this.setState({\n        dinos:dinoObj\n      })\n    }) \n\n    fetch(\"https://hidden-fjord-86683.herokuapp.com/colors\")\n    .then(res=>res.json())\n    .then(colorObj =>{\n      this.setState({\n        colors:colorObj\n      })\n    }) \n    \n    fetch(\"https://hidden-fjord-86683.herokuapp.com/dinos\")\n    .then(res=>res.json())\n    .then(userObj =>{\n      this.setState({\n        users:userObj\n      })\n    }) \n  }\n\n  createDinoCard = (dinoCard) =>{\n    let prevDinoCards = this.state.dinocards\n    prevDinoCards.push(dinoCard)\n    this.setState({dinocards:prevDinoCards})\n  }\n\n  deleteDino = (cardId) => {\n    const url = `https://hidden-fjord-86683.herokuapp.com/user_cards/${cardId}`\n        fetch(url, {method: 'DELETE'})\n        .then(res=>res.json())\n        .catch(error=>console.error(\"Error:\", error))\n        .then(response=>{\n          let dinocards = this.state.dinocards.filter(dinocard =>  dinocard.id !== cardId )\n          this.setState({dinocards:dinocards})\n  })\n  }\n\n  getDinoCards = () => {\n    fetch(\"https://hidden-fjord-86683.herokuapp.com/user_cards\")\n    .then(res=>res.json())\n    .then(dinoCardsObj =>{\n      console.log(dinoCardsObj)\n    })  \n  }\n\n  reverse = () => {\n    let dinocardsR = this.state.dinocards\n    let dinocardsR2 = [...dinocardsR]\n    let dinocardsRR = dinocardsR2.reverse()\n    this.setState({dinocards:dinocardsRR});\n  }\n  \n  \n  render() {\n    return (\n      <div className=\"app\">\n          <p id=\"title\">Dinosaur Cards</p>\n          <CardList \n                colors={this.state.colors}\n                dinos={this.state.dinos} \n                dinocards={this.state.dinocards}\n                handleNameSubmit={this.handleNameSubmit}\n                createDinoCard={this.createDinoCard}\n                deleteDino={this.deleteDino}\n                reverse={this.reverse}\n                />\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}